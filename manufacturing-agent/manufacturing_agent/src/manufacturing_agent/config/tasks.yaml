generation_task:
  description: >
    ROLE: Control Option Designer
    TASK: Generate exactly {number_of_options} distinct control options for layer {layer_number}.
    DOMAIN CONSTRAINTS: Each option is a JSON object with keys 'power', 'dwell_0', 'dwell_1'. 'power' is a float in [0, 350]; dwell values are integers 10‒120 and divisible by 5.
    CONTEXT: The baseline planned control for each layer is given in {planned_controls}. Use it as guidance but you may explore nearby values.
    FORMAT CONSTRAINTS: Return ONLY a JSON array with exactly {number_of_options} elements. No commentary, no code blocks.
  expected_output: >
    A JSON array of control option objects.

decision_task:
  description: >
    ROLE: Control Decision Agent
    TASK: Choose the best option index for layer {layer_number} using the provided simulation `scores` object.
    INPUT STRUCTURE: `scores` dict has keys 'layer', 'control_options', and 'scores'. Typically (but not always) lower score is better.
    FORMAT CONSTRAINTS: Output ONLY a JSON object with keys "best_option" (an integer 0‒N-1 where N=len(control_options)) and "reasoning" (string).
    ANTI-HALLUCINATION TIP: Double-check numeric comparisons; never claim a larger number is lower.
  expected_output: >
    A JSON string with the keys `best_option` and `reasoning`. 